#!/usr/bin/env ruby
# frozen_string_literal: true

# add in case we are in dev
$LOAD_PATH.unshift(File.join(File.dirname(__dir__), 'lib'))

begin
  require 'string_colors'
  require 'ets_to_hass'
  require 'getoptlong'
rescue LoadError => e
  puts(e.backtrace.join("\n"))
  puts("Missing gems (#{e}): read the manual: execute:")
  puts("gem install bundler\nbundle install".blink)
  exit(1)
end

# prefix of generation methods
GENE_PREFIX = 'generate_'
# get list of generation methods
gene_formats = (EtsToHass.instance_methods - EtsToHass.superclass.instance_methods)
               .select { |m| m.to_s.start_with?(GENE_PREFIX) }
               .map { |m| m[GENE_PREFIX.length..-1] }

opts = GetoptLong.new(
  ['--help', '-h', GetoptLong::NO_ARGUMENT],
  ['--format', '-f', GetoptLong::REQUIRED_ARGUMENT],
  ['--ha-knx', '-k', GetoptLong::NO_ARGUMENT],
  ['--full-name', '-n', GetoptLong::NO_ARGUMENT],
  ['--specific', '-s', GetoptLong::REQUIRED_ARGUMENT],
  ['--trace', '-t', GetoptLong::REQUIRED_ARGUMENT],
  ['--output', '-o', GetoptLong::REQUIRED_ARGUMENT],
  ['--addr', '-a', GetoptLong::REQUIRED_ARGUMENT]
)

options = {}
# default custom specific
specific_override = nil
output_format = 'homeass'
opts.each do |opt, arg|
  case opt
  when '--help'
    puts <<-END_OF_MANUAL
            Usage: #{$PROGRAM_NAME} [--format format] [--specific specific] [--addr addr] [--trace trace] [--ha-knx] [--full-name] <ets project file>.knxproj

            -h, --help:
              show help

            --format [format]:
              one of #{gene_formats.join('|')}

            --specific [specific]:
              file with specific

            --addr [addr]:
              one of #{EtsToHass::GROUP_ADDRESS_PARSERS.keys.map(&:to_s).join(', ')}

            --trace [trace]:
              one of debug, info, warn, error

            --ha-knx:
              include level knx in output file

            --full-name:
              add room name in object name
    END_OF_MANUAL
    Process.exit(1)
  when '--specific'
    specific_override = arg
  when '--format'
    output_format = arg
    raise "Error: no such output format: #{output_format}" unless gene_formats.include?(output_format)
  when '--ha-knx'
    options[:ha_knx] = true
  when '--full-name'
    options[:full_name] = true
  when '--trace'
    options[:trace] = arg
  when '--addr'
    options[:addr] = arg
  when '--output'
    options[:output] = arg
  else
    raise "Unknown option #{opt}"
  end
end

if ARGV.length != 1
  puts 'Missing project file argument (try --help)'
  Process.exit(1)
end

output_file =
  if options[:output]
    File.open(options[:output], 'w')
  else
    $stdout
  end
project_file_path = ARGV.shift

# read and parse ETS file
knx_config = EtsToHass.new(project_file_path, options)
load(specific_override) if specific_override
knx_config.apply_specific
# apply specific code (default or user provided) with object as argument
load(specific_override) if specific_override
# generate result (e.g. call generate_homeass)
output_file.write(knx_config.send(:"#{GENE_PREFIX}#{output_format}"))
